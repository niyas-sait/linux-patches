From 1930d5edc0537f68ef1cfcfe77da263a8f0bfc0e Mon Sep 17 00:00:00 2001
From: Niyas Sait <niyas.sait@linaro.org>
Date: Wed, 30 Nov 2022 14:10:18 +0000
Subject: [PATCH] imx8mp: add ACPI support for pin controller

---
 drivers/pinctrl/freescale/pinctrl-imx.c    | 197 +++++++++++++++++++--
 drivers/pinctrl/freescale/pinctrl-imx.h    |  20 +++
 drivers/pinctrl/freescale/pinctrl-imx8mp.c | 179 ++++++++++++++++++-
 3 files changed, 377 insertions(+), 19 deletions(-)

diff --git a/drivers/pinctrl/freescale/pinctrl-imx.c b/drivers/pinctrl/freescale/pinctrl-imx.c
index 3a7d2de10b13..1d529a267f77 100644
--- a/drivers/pinctrl/freescale/pinctrl-imx.c
+++ b/drivers/pinctrl/freescale/pinctrl-imx.c
@@ -21,11 +21,13 @@
 #include <linux/pinctrl/pinmux.h>
 #include <linux/slab.h>
 #include <linux/regmap.h>
+#include <linux/acpi.h>
 
 #include "../core.h"
 #include "../pinconf.h"
 #include "../pinmux.h"
 #include "pinctrl-imx.h"
+#include "../pinctrl-acpi.h"
 
 /* The bits in CONFIG cell defined in binding doc*/
 #define IMX_NO_PAD_CTL	0x80000000	/* no pin config need */
@@ -47,12 +49,90 @@ static inline const struct group_desc *imx_pinctrl_find_group_by_name(
 	return grp;
 }
 
+static inline const char *
+imx_pinctrl_find_pin_group(struct pinctrl_dev *pctldev, unsigned selector,
+			   unsigned int *pins_in, size_t npins_in)
+{
+	int i, j;
+
+	int ret;
+	const char *const *groups;
+	unsigned num_groups;
+	const unsigned *pins;
+	unsigned num_pins;
+
+	ret = pinmux_generic_get_function_groups(pctldev, selector, &groups,
+						 &num_groups);
+	for (i = 0; i < num_groups; i++) {
+		ret = pinctrl_get_group_pins(pctldev, groups[i], &pins,
+					     &num_pins);
+		for (j = 0; j < num_pins; j++) {
+			if (pins[j] == pins_in[0])
+				return groups[i];
+		}
+	}
+	return NULL;
+}
+
 static void imx_pin_dbg_show(struct pinctrl_dev *pctldev, struct seq_file *s,
 		   unsigned offset)
 {
 	seq_printf(s, "%s", dev_name(pctldev->dev));
 }
 
+static int imx_acpi_node_to_map(struct pinctrl_dev *pctldev,
+				struct pinctrl_acpi_resource *info,
+				struct pinctrl_map **map,
+				unsigned *num_maps_out)
+{
+	struct pinctrl_map *new_map;
+	struct function_desc *fun_desc;
+	struct pinctrl_acpi_config_node *config_node;
+	const char *grp;
+	size_t num_maps = 1;
+	int fun_selector;
+
+	new_map = devm_kzalloc(pctldev->dev, sizeof(struct pinctrl_map),
+			       GFP_KERNEL);
+
+	switch (info->type) {
+	case PINCTRL_ACPI_PIN_FUNCTION:
+		fun_selector = info->function.function_number - 1;
+		grp = imx_pinctrl_find_pin_group(
+			pctldev, fun_selector, info->function.pins, info->function.npins);
+		if (!grp) {
+			dev_err(pctldev->dev, "Pin group cannot be found\n");
+			return -1;
+		}
+		new_map->type = PIN_MAP_TYPE_MUX_GROUP;
+		new_map->data.mux.group = grp;
+		fun_desc = pinmux_generic_get_function(pctldev, fun_selector);
+		if (!fun_desc) {
+			dev_err(pctldev->dev, "Function number %d cannot be mapped\n", info->function.function_number);
+			return -1;
+		}
+		new_map->data.mux.function = fun_desc->name;
+		break;
+	case PINCTRL_ACPI_PIN_CONFIG:
+		new_map->type = PIN_MAP_TYPE_CONFIGS_PIN;
+		new_map->data.configs.group_or_pin = pin_get_name(
+			pctldev, info->config.pin);
+		new_map->data.configs.configs = devm_kcalloc(
+			pctldev->dev, info->config.nconfigs,
+			sizeof(unsigned long), GFP_KERNEL);
+		new_map->data.configs.num_configs = 0;
+		list_for_each_entry(config_node, info->config.configs, node)
+			new_map->data.configs.configs[new_map->data.configs.num_configs++] =
+				config_node->config;
+		break;
+	}
+
+	*map = new_map;
+	*num_maps_out = num_maps;
+
+	return 0;
+}
+
 static int imx_dt_node_to_map(struct pinctrl_dev *pctldev,
 			struct device_node *np,
 			struct pinctrl_map **map, unsigned *num_maps)
@@ -151,13 +231,21 @@ static void imx_dt_free_map(struct pinctrl_dev *pctldev,
 	kfree(map);
 }
 
+static void imx_acpi_free_map(struct pinctrl_dev *pctldev,
+				struct pinctrl_map *map, unsigned num_maps)
+{
+	kfree(map);
+}
+
 static const struct pinctrl_ops imx_pctrl_ops = {
 	.get_groups_count = pinctrl_generic_get_group_count,
 	.get_group_name = pinctrl_generic_get_group_name,
 	.get_group_pins = pinctrl_generic_get_group_pins,
 	.pin_dbg_show = imx_pin_dbg_show,
 	.dt_node_to_map = imx_dt_node_to_map,
+	.acpi_node_to_map = imx_acpi_node_to_map,
 	.dt_free_map = imx_dt_free_map,
+	.acpi_free_map = imx_acpi_free_map,
 };
 
 static int imx_pmx_set_one_pin_mmio(struct imx_pinctrl *ipctl,
@@ -273,6 +361,7 @@ static int imx_pmx_set(struct pinctrl_dev *pctldev, unsigned selector,
 		 * in one IPC call
 		 */
 		pin = &((struct imx_pin *)(grp->data))[i];
+
 		if (!(info->flags & IMX_USE_SCU)) {
 			err = imx_pmx_set_one_pin_mmio(ipctl, pin);
 			if (err)
@@ -343,7 +432,10 @@ static u32 imx_pinconf_parse_generic_config(struct device_node *np,
 	if (ret)
 		return 0;
 
-	return imx_pinconf_decode_generic_config(ipctl, configs, num_configs);
+	if (ipctl->info->decode_generic_config)
+		return ipctl->info->decode_generic_config(ipctl, configs, num_configs);
+	else
+		return imx_pinconf_decode_generic_config(ipctl, configs, num_configs);
 }
 
 static int imx_pinconf_get_mmio(struct pinctrl_dev *pctldev, unsigned pin_id,
@@ -397,21 +489,29 @@ static int imx_pinconf_set_mmio(struct pinctrl_dev *pctldev,
 	dev_dbg(ipctl->dev, "pinconf set pin %s\n",
 		info->pins[pin_id].name);
 
-	for (i = 0; i < num_configs; i++) {
-		if (info->flags & SHARE_MUX_CONF_REG) {
-			u32 reg;
-			reg = readl(ipctl->base + pin_reg->conf_reg);
-			reg &= info->mux_mask;
-			reg |= configs[i];
+	if (info->decode_generic_config){
+		u32 reg = ipctl->info->decode_generic_config(ipctl, configs, num_configs);
+		if (reg) {
 			writel(reg, ipctl->base + pin_reg->conf_reg);
-			dev_dbg(ipctl->dev, "write: offset 0x%x val 0x%x\n",
-				pin_reg->conf_reg, reg);
-		} else {
-			writel(configs[i], ipctl->base + pin_reg->conf_reg);
-			dev_dbg(ipctl->dev, "write: offset 0x%x val 0x%lx\n",
-				pin_reg->conf_reg, configs[i]);
+			dev_dbg(ipctl->dev, "write: offset 0x%x val 0x%x\n", pin_reg->conf_reg, reg);
 		}
-	} /* for each config */
+	} else {
+		for (i = 0; i < num_configs; i++) {
+			if (info->flags & SHARE_MUX_CONF_REG) {
+				u32 reg;
+				reg = readl(ipctl->base + pin_reg->conf_reg);
+				reg &= info->mux_mask;
+				reg |= configs[i];
+				writel(reg, ipctl->base + pin_reg->conf_reg);
+				dev_dbg(ipctl->dev, "write: offset 0x%x val 0x%x\n",
+					pin_reg->conf_reg, reg);
+			} else {
+				writel(configs[i], ipctl->base + pin_reg->conf_reg);
+				dev_dbg(ipctl->dev, "write: offset 0x%x val 0x%lx\n",
+					pin_reg->conf_reg, configs[i]);
+			}
+		} /* for each config */
+	}
 
 	return 0;
 }
@@ -722,6 +822,59 @@ static bool imx_pinctrl_dt_is_flat_functions(struct device_node *np)
 	return true;
 }
 
+static int imx_pinctrl_probe_acpi(struct platform_device *pdev,
+				  struct imx_pinctrl *ipctl)
+{
+	struct function_desc **funs = ipctl->info->functions;
+	struct group_desc **groups = ipctl->info->groups;
+	size_t num_groups = ipctl->info->num_groups;
+	size_t num_funs = ipctl->info->num_functions;
+	struct pinctrl_dev *pctl = ipctl->pctl;
+	struct imx_pin *pin;
+	struct imx_pin_mmio *pin_mmio;
+	struct imx_pin_reg *pin_reg;
+	struct imx_pinctrl_regs *regs;
+	int i, j;
+
+	for (i = 0; i < num_funs; i++) {
+		mutex_lock(&ipctl->mutex);
+		radix_tree_insert(&pctl->pin_function_tree, i, funs[i]);
+		mutex_unlock(&ipctl->mutex);
+	}
+
+	pctl->num_functions = num_funs;
+	ipctl->group_index = 0;
+
+	for (i = 0; i < num_groups; i++) {
+		groups[i]->data = devm_kcalloc(ipctl->dev, groups[i]->num_pins,
+					       sizeof(struct imx_pin),
+					       GFP_KERNEL);
+		if (!groups[i]->data)
+			return -ENOMEM;
+
+		for (j = 0; j < groups[i]->num_pins; j++) {
+			pin = &((struct imx_pin *)(groups[i]->data))[j];
+			pin->pin = groups[i]->pins[j];
+			pin_mmio = &pin->conf.mmio;
+			pin_reg = &ipctl->pin_regs[pin->pin];
+			regs = ipctl->info->acpi_group_regs(groups[i]->name, groups[i]->pins[j]);
+			pin_reg->mux_reg = regs->mux_reg;
+			pin_reg->conf_reg = regs->conf_reg;
+			pin_mmio->input_reg = regs->input_reg;
+			pin_mmio->mux_mode = regs->mux_mode;
+			pin_mmio->input_val = regs->input_val;
+		}
+		mutex_lock(&ipctl->mutex);
+		radix_tree_insert(&pctl->pin_group_tree, ipctl->group_index++,
+				  groups[i]);
+		mutex_unlock(&ipctl->mutex);
+	}
+
+	pctl->num_groups = num_groups;
+
+	return 0;
+}
+
 static int imx_pinctrl_probe_dt(struct platform_device *pdev,
 				struct imx_pinctrl *ipctl)
 {
@@ -873,10 +1026,18 @@ int imx_pinctrl_probe(struct platform_device *pdev,
 		return ret;
 	}
 
-	ret = imx_pinctrl_probe_dt(pdev, ipctl);
-	if (ret) {
-		dev_err(&pdev->dev, "fail to probe dt properties\n");
-		return ret;
+	if (has_acpi_companion(&pdev->dev)) {
+		ret = imx_pinctrl_probe_acpi(pdev, ipctl);
+		if (ret) {
+			dev_err(&pdev->dev, "fail to probe acpi properties\n");
+			return ret;
+		}
+	} else {
+		ret = imx_pinctrl_probe_dt(pdev, ipctl);
+		if (ret) {
+			dev_err(&pdev->dev, "fail to probe dt properties\n");
+			return ret;
+		}
 	}
 
 	dev_info(&pdev->dev, "initialized IMX pinctrl driver\n");
diff --git a/drivers/pinctrl/freescale/pinctrl-imx.h b/drivers/pinctrl/freescale/pinctrl-imx.h
index fd8c4b6b3e36..4b4a17052da1 100644
--- a/drivers/pinctrl/freescale/pinctrl-imx.h
+++ b/drivers/pinctrl/freescale/pinctrl-imx.h
@@ -90,6 +90,15 @@ struct imx_pinctrl {
 	struct mutex mutex;
 };
 
+struct imx_pinctrl_regs {
+	int pin;
+	unsigned int mux_reg;
+	unsigned int conf_reg;
+	unsigned int input_reg;
+	unsigned int mux_mode;
+	unsigned int input_val;
+};
+
 struct imx_pinctrl_soc_info {
 	const struct pinctrl_pin_desc *pins;
 	unsigned int npins;
@@ -106,6 +115,12 @@ struct imx_pinctrl_soc_info {
 	unsigned int num_custom_params;
 	const struct imx_cfg_params_decode *decodes;
 	unsigned int num_decodes;
+
+	struct function_desc **functions;
+	unsigned int num_functions;
+	struct group_desc **groups;
+	unsigned int num_groups;
+
 	void (*fixup)(unsigned long *configs, unsigned int num_configs,
 		      u32 *raw_config);
 
@@ -120,6 +135,11 @@ struct imx_pinctrl_soc_info {
 	void (*imx_pinctrl_parse_pin)(struct imx_pinctrl *ipctl,
 				      unsigned int *pin_id, struct imx_pin *pin,
 				      const __be32 **list_p);
+	unsigned (*decode_generic_config)(struct imx_pinctrl *ipctl,
+						unsigned long *configs, unsigned int num_configs);
+	struct imx_pinctrl_regs* (*acpi_group_regs)(const char *group, int pin);
+
+
 };
 
 #define IMX_CFG_PARAMS_DECODE(p, m, o) \
diff --git a/drivers/pinctrl/freescale/pinctrl-imx8mp.c b/drivers/pinctrl/freescale/pinctrl-imx8mp.c
index 88abc257318f..49214e00e16b 100644
--- a/drivers/pinctrl/freescale/pinctrl-imx8mp.c
+++ b/drivers/pinctrl/freescale/pinctrl-imx8mp.c
@@ -9,8 +9,11 @@
 #include <linux/of.h>
 #include <linux/pinctrl/pinctrl.h>
 #include <linux/platform_device.h>
+#include <linux/acpi.h>
 
 #include "pinctrl-imx.h"
+#include "../core.h"
+#include "../pinmux.h"
 
 enum imx8mp_pads {
 	MX8MP_IOMUXC_RESERVE0 = 0,
@@ -163,6 +166,107 @@ enum imx8mp_pads {
 	MX8MP_IOMUXC_HDMI_HPD = 147,
 };
 
+struct imx_pinctrl_acpi_groups {
+	const char *group;
+	const struct imx_pinctrl_regs *regs;
+	const size_t npins;
+};
+
+static const struct imx_pinctrl_regs i2c1grp_regs[] = {
+	{ MX8MP_IOMUXC_I2C1_SCL, 0x200, 0x460, 0x5A4, 0x10, 0x2 },
+	{ MX8MP_IOMUXC_I2C1_SDA, 0x204, 0x464, 0x5A8, 0x10, 0x2 }
+};
+
+static const struct imx_pinctrl_regs i2c2grp_regs[] = {
+	{ MX8MP_IOMUXC_I2C2_SCL, 0x208, 0x468, 0x5AC, 0x10, 0x2 },
+	{ MX8MP_IOMUXC_I2C2_SDA, 0x20C, 0x46C, 0x5B0, 0x10, 0x2 }
+};
+
+static const struct imx_pinctrl_regs i2c3grp_regs[] = {
+	{ MX8MP_IOMUXC_I2C3_SCL, 0x210, 0x470, 0x5B4, 0x10, 0x4 },
+	{ MX8MP_IOMUXC_I2C3_SDA, 0x214, 0x474, 0x5B8, 0x10, 0x4 }
+};
+
+static const struct imx_pinctrl_regs i2c4grp_regs[] = {
+	{ MX8MP_IOMUXC_I2C4_SCL, 0x218, 0x478, 0x5BC, 0x10, 0x5 },
+	{ MX8MP_IOMUXC_I2C4_SDA, 0x21C, 0x47C, 0x5C0, 0x10, 0x5 }
+};
+
+static const struct imx_pinctrl_regs gpiokeygrp_regs[] = {
+	{ MX8MP_IOMUXC_SAI1_TXD6, 0x190, 0x3F0, 0x000, 0x15, 0x0 },
+	{ MX8MP_IOMUXC_SAI2_TXFS, 0x1A8, 0x408, 0x000, 0x15, 0x0 }
+};
+
+static const struct imx_pinctrl_acpi_groups imx8mp_pinctrl_acpi_groups[] = {
+	{ "i2c1grp", i2c1grp_regs, ARRAY_SIZE(i2c1grp_regs) },
+	{ "i2c2grp", i2c2grp_regs, ARRAY_SIZE(i2c2grp_regs) },
+	{ "i2c3grp", i2c3grp_regs, ARRAY_SIZE(i2c3grp_regs) },
+	{ "i2c4grp", i2c4grp_regs, ARRAY_SIZE(i2c4grp_regs) },
+	{ "gpiokeygrp", gpiokeygrp_regs, ARRAY_SIZE(gpiokeygrp_regs) }
+};
+
+static int i2c1grp_pins[] = { MX8MP_IOMUXC_I2C1_SCL, MX8MP_IOMUXC_I2C1_SDA };
+static int i2c2grp_pins[] = { MX8MP_IOMUXC_I2C2_SCL, MX8MP_IOMUXC_I2C2_SDA };
+static int i2c3grp_pins[] = { MX8MP_IOMUXC_I2C3_SCL, MX8MP_IOMUXC_I2C3_SDA };
+static int i2c4grp_pins[] = { MX8MP_IOMUXC_I2C4_SCL, MX8MP_IOMUXC_I2C4_SDA };
+static int gpiokeygrp_pins[] = { MX8MP_IOMUXC_SAI1_TXD6,
+				 MX8MP_IOMUXC_SAI2_TXFS };
+
+struct group_desc i2c1grp = { .name = "i2c1grp",
+			      .num_pins = ARRAY_SIZE(i2c1grp_pins),
+			      .pins = i2c1grp_pins };
+struct group_desc i2c2grp = { .name = "i2c2grp",
+			      .num_pins = ARRAY_SIZE(i2c2grp_pins),
+			      .pins = i2c2grp_pins };
+struct group_desc i2c3grp = { .name = "i2c3grp",
+			      .num_pins = ARRAY_SIZE(i2c3grp_pins),
+			      .pins = i2c3grp_pins };
+struct group_desc i2c4grp = { .name = "i2c4grp",
+			      .num_pins = ARRAY_SIZE(i2c4grp_pins),
+			      .pins = i2c4grp_pins };
+struct group_desc gpiokeygrp = { .name = "gpiokeygrp",
+				 .num_pins = ARRAY_SIZE(gpiokeygrp_pins),
+				 .pins = gpiokeygrp_pins };
+
+const char *i2c_group_names[] = { "i2c1grp", "i2c2grp", "i2c3grp", "i2c4grp" };
+const char *gpiokeygrp_group_names[] = { "gpiokeygrp" };
+
+static struct function_desc i2c_func = { .name = "i2c",
+					 .group_names = i2c_group_names,
+					 .num_group_names =
+						 ARRAY_SIZE(i2c_group_names) };
+
+static struct function_desc gpio_func = { .name = "gpio",
+					  .group_names = gpiokeygrp_group_names,
+					  .num_group_names = ARRAY_SIZE(
+						  gpiokeygrp_group_names) };
+
+static struct function_desc *imx8mp_pinctrl_funs[] = { &i2c_func, &gpio_func };
+
+struct group_desc *imx8mp_pinctrl_groups[] = { &i2c1grp, &i2c2grp, &i2c3grp,
+					       &i2c4grp, &gpiokeygrp };
+
+static struct imx_pinctrl_regs *imx8mp_acpi_group_regs(const char *group,
+						       int pin)
+{
+	int i, j;
+
+	for (i = 0; i < ARRAY_SIZE(imx8mp_pinctrl_acpi_groups); i++) {
+		if (strcmp(imx8mp_pinctrl_acpi_groups[i].group, group) == 0) {
+			for (j = 0; j < imx8mp_pinctrl_acpi_groups[i].npins;
+			     j++) {
+				if (imx8mp_pinctrl_acpi_groups[i].regs[j].pin ==
+				    pin) {
+					return &imx8mp_pinctrl_acpi_groups[i]
+							.regs[j];
+				}
+			}
+		}
+	}
+
+	return NULL;
+}
+
 /* Pad names for the pinmux subsystem */
 static const struct pinctrl_pin_desc imx8mp_pinctrl_pads[] = {
 	IMX_PINCTRL_PIN(MX8MP_IOMUXC_RESERVE0),
@@ -321,21 +425,94 @@ static const struct imx_pinctrl_soc_info imx8mp_pinctrl_info = {
 	.gpr_compatible = "fsl,imx8mp-iomuxc-gpr",
 };
 
+static u32 imx8mp_pinconf_decode_generic_config(struct imx_pinctrl *ipctl,
+				unsigned long *configs,
+				unsigned int num_configs)
+{
+	int i;
+	u32 raw_config = 0;
+	enum pin_config_param param;
+	u32 param_val;
+
+	for (i = 0; i < num_configs; i++) {
+		param = pinconf_to_config_param(configs[i]);
+		param_val = pinconf_to_config_argument(configs[i]);
+		switch (param){
+			case PIN_CONFIG_BIAS_PULL_UP:
+				raw_config |= (1 << 6); // Pull Select
+				raw_config |= (1 << 8); // Pull Enable
+				break;
+			case PIN_CONFIG_BIAS_PULL_DOWN:
+				raw_config &= ~(1 << 6); // Pull Select
+				raw_config |= (1 << 8);  // Pull Enable
+				break;
+			case PIN_CONFIG_DRIVE_STRENGTH:
+				if (param_val <= 2) {
+				} else if(param_val == 4) {
+					raw_config |= (1 << 1);
+				} else if (param_val == 8) {
+					raw_config |= (2 << 1);
+				} else {
+					raw_config |= (3 << 1);
+				}
+				break;
+			case PIN_CONFIG_INPUT_SCHMITT_ENABLE:
+				raw_config |= (1 << 7);
+				break;
+			case PIN_CONFIG_SLEW_RATE:
+				if (param_val != 0)
+					raw_config |= (1 << 7);
+				break;
+			default:
+				break;
+		}
+	}
+	return raw_config;
+}
+
+
+static const struct imx_pinctrl_soc_info imx8mp_pinctrl_acpi_info = {
+	.pins = imx8mp_pinctrl_pads,
+	.npins = ARRAY_SIZE(imx8mp_pinctrl_pads),
+	.gpr_compatible = "fsl,imx8mp-iomuxc-gpr",
+	.generic_pinconf = true,
+	.decode_generic_config=imx8mp_pinconf_decode_generic_config,
+	.acpi_group_regs=imx8mp_acpi_group_regs,
+	.functions=imx8mp_pinctrl_funs,
+	.num_functions=ARRAY_SIZE(imx8mp_pinctrl_funs),
+	.groups=imx8mp_pinctrl_groups,
+	.num_groups=ARRAY_SIZE(imx8mp_pinctrl_groups)
+};
+
 static const struct of_device_id imx8mp_pinctrl_of_match[] = {
 	{ .compatible = "fsl,imx8mp-iomuxc", .data = &imx8mp_pinctrl_info, },
 	{ /* sentinel */ }
 };
+
+static const struct acpi_device_id imx8mp_pinctrl_acpi_match[] = {
+	{
+		.id = "NXP0199",
+		.driver_data = (kernel_ulong_t) &imx8mp_pinctrl_acpi_info,
+	},
+	{ }
+};
+
 MODULE_DEVICE_TABLE(of, imx8mp_pinctrl_of_match);
 
 static int imx8mp_pinctrl_probe(struct platform_device *pdev)
 {
-	return imx_pinctrl_probe(pdev, &imx8mp_pinctrl_info);
+	if (has_acpi_companion(&pdev->dev)) {
+		return imx_pinctrl_probe(pdev, &imx8mp_pinctrl_acpi_info);
+	} else {
+		return imx_pinctrl_probe(pdev, &imx8mp_pinctrl_info);
+	}
 }
 
 static struct platform_driver imx8mp_pinctrl_driver = {
 	.driver = {
 		.name = "imx8mp-pinctrl",
 		.of_match_table = imx8mp_pinctrl_of_match,
+		.acpi_match_table = imx8mp_pinctrl_acpi_match,
 		.suppress_bind_attrs = true,
 	},
 	.probe = imx8mp_pinctrl_probe,
-- 
2.25.1

